// src/scripts/seed.ts
import db from "~/db/index";
import { product, user as userTable } from "~/db/schema";
import { faker } from "@faker-js/faker";
import { sql, eq } from "drizzle-orm";

const NUM_PRODUCTS_TO_SEED = 50;
const ADMIN_EMAIL = "1@gmail.com";

async function seedProducts() {
  console.log("Seeding products...");

  const countResult = await db
    .select({ count: sql<number>`cast(count(*) as integer)` })
    .from(product);

  const existingProductCount = countResult[0]?.count || 0;

  if (existingProductCount >= NUM_PRODUCTS_TO_SEED) {
    console.log(
      `Already have ${existingProductCount} products. No product seeding needed.`
    );
    return;
  }

  const productsToInsert = [];
  const neededProducts = NUM_PRODUCTS_TO_SEED - existingProductCount;

  console.log(`Need to seed ${neededProducts} more products.`);

  for (let i = 0; i < neededProducts; i++) {
    productsToInsert.push({
      // id: faker.string.uuid(), // REMOVED: Assuming id is now auto-generated by DB via defaultRandom()
      name: faker.commerce.productName(),
      description: faker.commerce.productDescription(),
      priceInCents: parseInt(
        faker.commerce.price({ min: 1000, max: 30000, dec: 0 }),
        10
      ),
      imageUrl: faker.image.urlPicsumPhotos({ width: 640, height: 480 }),
      category: faker.commerce.department(),
      stockQuantity: faker.number.int({ min: 0, max: 100 }),
    });
  }

  if (productsToInsert.length > 0) {
    console.log(`Inserting ${productsToInsert.length} new products...`);
    await db.insert(product).values(productsToInsert);
    console.log(`Seeded ${productsToInsert.length} products.`);
  } else if (neededProducts > 0) {
    console.log(
      "No new products were seeded (unexpected, check productsToInsert logic)."
    );
  }
  console.log("Product seeding complete.");
}

async function seedAdminUser() {
  console.log(`Checking for admin user: ${ADMIN_EMAIL}...`);

  try {
    const existingUser = await db
      .select()
      .from(userTable)
      .where(eq(userTable.email, ADMIN_EMAIL))
      .limit(1);

    if (existingUser.length > 0) {
      const currentUser = existingUser[0]; // This should be safe due to .limit(1) and length > 0

      // Add a null check for currentUser to satisfy TypeScript, though logically it should be defined here.
      if (currentUser) {
        if (currentUser.role !== "admin") {
          await db
            .update(userTable)
            .set({ role: "admin" })
            .where(eq(userTable.id, currentUser.id));
          console.log(`User ${ADMIN_EMAIL} updated to admin role.`);
        } else {
          console.log(`User ${ADMIN_EMAIL} is already an admin.`);
        }
      } else {
        // This case should ideally not be reached if existingUser.length > 0
        console.warn(
          `Admin user ${ADMIN_EMAIL} was found in query but currentUser object is undefined. This is unexpected.`
        );
      }
    } else {
      console.log(
        `Admin user ${ADMIN_EMAIL} not found. This script will not create them.`
      );
      console.log(
        `Please ensure the user signs up through your application first, then re-run this seed to make them an admin.`
      );
    }
  } catch (error) {
    console.error(`Error processing admin user ${ADMIN_EMAIL}:`, error);
  }
  console.log("Admin user seeding check complete.");
}

async function main() {
  try {
    await seedProducts();
    await seedAdminUser();
    console.log("Seed script finished successfully.");
  } catch (error) {
    console.error("Error seeding database:", error);
    process.exit(1);
  }
}

main();
